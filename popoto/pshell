
#!/usr/bin/python
import popoto
try:
	import cmd2
except:
	import cmd as cmd2

import sys
import time
import os
import subprocess
import logging
import string
import datetime
from select import select
import logging.handlers

logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s  %(message)s" )



class dshell(cmd2.Cmd):
	def __init__(self):
		self.popoto = None

		cmd2.Cmd.__init__(self)
		self.debug = True
		self.prompt = "Popoto-> "
		self.intro="""

                                       demPo    
                                  ot_ModemP    
                               opoto_Modem      
                             mPopoto_Modem      
                     oto_ModemPopoto_ModemPopot  
                 mPopoto_ModemPopoto_ModemPopoto_ 
              odemPopoto_ModemPopoto_ModemPopoto_Mode         
            _ModemPopoto_ModemPopoto_ModemPopoto_ModemPop     
          to_ModemPopoto_ModemPopoto_ModemPopoto_ModemPopot   
        poto_ModemPopoto_ModemPopoto_ModemPopoto_ModemPopoto_M
       opoto_ModemPopoto_ModemPopoto_ModemPopoto_ModemPopoto_Mo 
      Popoto_ModemPopoto_Modem                     demPopoto_Mode         
      Popoto_ModemPopoto_ModemPopoto_                  opoto_Modem        
       opoto_ModemPopoto_ModemPopot                          ModemP       
       opoto_ModemP                                             emPopoto_M
      Popot                                                      opoto_ModemP
     mPo                                                           opoto_Modem 
                                                                    l        
                                                                     ph
                     Welcome to the Popoto modem Shell!

                          Communicating Naturally
"""
		self.carrier = 30000
		self.logger = logging.getLogger(__name__)

	def emptyline(self):
		return

	def do_startrx(self, line):
		'''
		This function enables the modem  receiver
		'''
		self.popoto.startRx()
	def do_connect(self, line):
		'''
			connect <ip> <base port>

			Establish a connection to the Popoto modem at ip:baseport
		'''
		args = line.split(' ')

		if not (self.popoto == None):
			del(self.popoto)

		self.popoto = popoto.popoto(args[0], int(args[1]))
		print("Connected to " + line)

		fh = logging.handlers.RotatingFileHandler('dshell.log.'+args[0]+'.'+args[1], maxBytes=1000000, backupCount=10, encoding=None, delay=False)
		logger = logging.getLogger()
		logger.handlers=[]

		logger.addHandler(fh)


	def do_disconnect(self, line):
		self.popoto.close()
		self.prompt = "Popoto-> (DISCONNECTED)"

	def do_getinbandenergy(self, line):
		'''
			getinbandenergy:   Reports the energy value of baseband input
		'''
		self.popoto.getInbandEnergy()

	def do_range(self, line):
		'''
			range <PowerScale>

			Sends a range request using the amplitude multiplier in PowerScale.   
				.05 < PowerScale < .7
				corresponds to XXX to YYY Watts 
		'''
		self.popoto.sendRange(float(line))

	def do_deepsleep(self, line):
		'''
		Place Popoto into Deep Sleep mode to be awakend by MSP
		'''
		self.popoto.send('Event_powerDown 1')
		print ("Entering Deep Sleep Mode")

	def do_mips(self, line):
		self.popoto.getCycleCount()

	def do_powerdown(self, line):
		'''
		Place Popoto into Powerdown mode to be awakend by MSP
		'''
		self.popoto.send('Event_powerDown 2')
		print ("Entering Deep Sleep Mode")

	def do_ssb(self, line):
		'''
		ssb mode
		'''
		self.popoto.send('startVoice')
		self.popoto.setValueI("APP_SystemMode", 2)


	def do_ssbtx(self, line):
		'''
		ssb mode
		'''
		self.popoto.send('startVoice')
		self.popoto.setValueI("APP_SystemMode", 3)

	def do_datamode(self, line):
		'''
		return to data mode
		'''
		self.popoto.startRx()
		self.popoto.setValueI("APP_SystemMode", 0)

	def do_getPEP(self, line):
		'''
		Return the Peak Envelope Power during Voice
		'''
		self.popoto.getvaluef('PeakEnvelopePower')

	def do_sleep(self, line):
		time.sleep(int(line))
	def do_powerdown(self,line):
		'''
		puts the omap in low power mode
		'''
		self.popoto.send('Event_powerDown 2')
	def do_chat(self,line):
		'''	
		puts Popoto into a character chat mode
		ctrl-] to exit
		'''
		verbosity = self.popoto.verbose 
		self.popoto.verbose = 0
		subprocess.call(['/usr/bin/telnet localhost 17001'], shell=True)
		self.popoto.verbose = verbosity

	def do_recordstart(self, line):
		'''
			recordstart <filename> [local]
			starts a recording over the streaming TCP interface.

			where filename is the name of the file to record

			if the local flag is set, then the file records on the same computer that is 
			running the dshell.   Otherwise the file records on the target processor

		'''
		args = line.split(" ")
		filename = args[0]
		duration = 0
		if(len(args) > 1):
			if(args[1] == 'local'):
				self.popoto.recordStart(filename)
				return
			else:
				duration = int(args[1])
		print ("Sent record start command to Target")		
		self.popoto.recordStartTarget(filename, duration)
	
	def do_recordstop(self, line):
		''' 
		stop and close an in-process recording
		'''
		args = line.split(" ")

		if(len(args) >= 1):
			if(args[0] == 'local'):
				self.popoto.recordStop() 
				print ("Sent record stop command to Target")
				return

		self.popoto.recordStopTarget()



	def do_playstart(self, line):
		'''
			playstart <filename> <scale factor>
			starts a playback from the local modem's filesystem.

			where filename is the name of the file to play

			where scale factor is a floating point gain to apply to the file

			if the local flag is set, then the file records on the same computer that is 
			running the dshell.   Otherwise the file records on the target processor

		'''

		try:
			
			args = line.split(" ")
			filename = args[0]
			scale = float(args[1])
		except:
			print("Use = playstart <filename> <scale factor>")
			return
		print ("Sent Play start command to Target")		
		self.popoto.playStartTarget(filename, scale)
	
	def do_playstop(self, line):
		''' 
		stop and close an in-process playback
		'''
		print("Stopping the Play command")
		self.popoto.playStopTarget()

	def do_setgainmode(self, line):
		'''
			setGainMode <0,1,2>
				
				GainMode 0 = High Gain Only
				GainMode 1 = Low Gain Only
				GainMode 2 = Automatic Gain Selection

		'''
		self.popoto.setGainMode(int(line))

	def do_setdetectthreshold(self, line):
		'''
			set the detection threshold in DB 
		'''
		self.popoto.setValueF('FHDEMOD_DetectThresholdDB', float(line))


	def do_setvaluei(self, line):
		'''
			setvaluei  <Element>

			Sets an integer value on the popoto modem

			setvaluef UPCONVERT_Carrier 30000
		'''
		args = line.split(" ")
		self.popoto.setValueI(args[0], int(args[1]))


	def complete_setvaluei(self, text, line, begidx, endidx):
		if not text:
			completions = [f for f in sorted(self.popoto.intParams)]
		else:
			completions = [f for f in sorted(self.popoto.intParams) if f.startswith(text)]
		return completions	

	def do_setvaluef(self, line):
		'''
			setvaluef  <Element>

			Sets a float value on the popoto modem

			setvaluef UPCONVERT_Carrier 30000
		'''
		args = line.split(" ")
		self.popoto.setValueF(args[0], float(args[1]))

	def complete_setvaluef(self, text, line, begidx, endidx):

		if not text:
			completions = [f for f in sorted(self.popoto.floatParams)]
		else:
			completions = [f for f in sorted(self.popoto.floatParams) if f.startswith(text)]
		return completions
	def do_getvaluei(self, Element):
		'''
			getvaluei  <Element>

			Retrieves an integer value from the popoto modem

			getvaluei UPCONVERT_Carrier
		'''
		self.popoto.getValueI(Element)
	
	def complete_getvaluei(self, text, line, begidx, endidx):
		if not text:
			completions = [f for f in sorted(self.popoto.intParams)]
		else:
			completions = [f for f in sorted(self.popoto.intParams) if f.startswith(text)]
		return completions


	def do_getvaluef(self, Element):
		'''
			getvaluef  <Element>

			Retrieves an float value from the popoto modem

			getvaluei UPCONVERT_Carrier
		'''
		self.popoto.getValueF(Element)

	def complete_getvaluef(self, text, line, begidx, endidx):
		if not text:
			completions = [f for f in sorted(self.popoto.floatParams)]
		else:
			completions = [f for f in sorted(self.popoto.floatParams) if f.startswith(text)]
		return completions

	def do_enablemsmlog(self, line):
		'''
			Enables logging of Modem State machine transitions
		'''
		self.popoto.send('EnableMSMLog')

	def do_disablemsmlog(self, line):
		'''
			Enables logging of Moem State machine transitions
		'''
		self.popoto.send('DisableMSMLog 0  ')

	def do_calibrate(self, line):
		self.popoto.calibrate();

	def do_ver(self, line):
		self.popoto.version();

	def do_setpower(self,line):
		'''
			setpower <PowerScale>

			Sets the amplitude multiplier in PowerScale.   
				.05 < PowerScale < .5
				corresponds to XXX to YYY Watts 
		'''
		self.setValueF('UPCONVERT_OutputScale', float(line))

	def do_npings(self,line):
		'''
			do_npings <count> 
		
			sends <count> pings at each power .1
		'''
		args = line.split(" ")
		if(args[0] <1):
			print( 'first parameter is the ping count')
		else:

			for p in [0]:
				for x in range(1,int(args[0])):
					self.popoto.sendPing(float(p))
					time.sleep(8.)

	def do_setcarrier25(self, line):
		'''
		Sets the modem carrier to 25 Khz
		'''
		self.popoto.setValueI("UPCONVERT_Carrier", 25000)
		self.popoto.setValueI("DOWNCONVERT_Carrier", 25000)
	def do_setcarrier(self, line):
		'''
		Sets the modem carrier to 25 Khz
		'''
		args = line.split(" ")
		if len(args) > 0:
			carrier = int(args[0])

			self.popoto.setValueI("UPCONVERT_Carrier", carrier)
			self.popoto.setValueI("DOWNCONVERT_Carrier", carrier)
		else:
			print (" Use:  setcarrier <frequency>")
	def do_setcarrier30(self, line):
		'''
		Sets the modem carrier to 30 Khz
		'''
		self.popoto.setValueI("UPCONVERT_Carrier", 30000)
		self.popoto.setValueI("DOWNCONVERT_Carrier", 30000)

	def do_setclock(self, line):
		''' 
			set the Realtime clock in the format YYYY.MM.DD-HH:MM;SS
		'''
		self.popoto.setRtc(line)

	def do_getclock(self, line):
		''' 
			set the Realtime clock in the format YYYY.MM.DD-HH:MM;SS
		'''
		self.popoto.getRtc()


	def do_ping(self, line):
		'''
			Sends a test message (Popoto Test Message) using the amplitude multiplier in PowerScale.   
				.05 < PowerScale < .7
				corresponds to XXX to YYY Watts 
		'''
		args = line.split(" ")
		if(len(args) != 1):
			print("Use ping [power level]")
		else:
			self.popoto.sendPing(float(line))


	def do_multiping(self, line):
		'''
			Use multiping <power Watts> <number of pings>  <delay in seconds>
		'''
		args = line.split(" ")
		airpower = float(args[0])
		nping = int(args[1])
		delays = float(args[2])
	
		if(nping > 50):
			nping = 50

		for i in range(1,nping + 1):
			print("********************* Sending Ping {} **********************".format(i))
			self.popoto.sendPing(airpower)
			time.sleep(delays)


	def do_netrec(self, line):
		'''
		Records file using the network sockets
		use:  netrec <delresearch File> <time in seconds> <BB/PB>
					  where file  BB/PB=1 -> Baseband Recording 0->Passband Recording
		'''
		args = line.split( ' ')
		if(len(args) != 3):
			print("Use netrec <file> <time in seconds> <BB/PB")
			print("where file  BB/PB=1 -> Baseband Recording 0->Passband Recording")
			return
		outFile = args[0]
		try: 
			duration = float(args[1]); 
			bb = int(args[2])
		except:
			print ("Invalid arguments:   type help netrec ")
			return
		self.popoto.RecPcmLoop(outFile, duration, bb )

	def do_netplay(self, line):
		'''
		Plays a file using the network sockets
		use netplay <delresearch file> <BB/PB>
		    Where BB/PB    1=  BaseBand Samples  PB = PassBand Samples
		
		'''
		args = line.split( ' ')
		if(len(args) != 2):
			print("Use netplay <file> <bb/pb>")
			return

		inFile = args[0]

		bb = int(args[1])

		self.popoto.PlayPcmLoop(inFile, bb)

	def  do_q(self, line):
		'''
		Quiet the output screen
		'''
		self.popoto.quiet=1
	def do_unq(self, line):
		'''
		Unquiet the output screen
		'''
		self.popoto.quiet = 0

	def do_quit(self, line):
		return self.do_exit(line)

	def do_exit(self, line):
		try:
			self.popoto.is_running = False
			time.sleep(3)
		except:
			print("Popoto Modem Not connected")
		self._should_quit = True
		return self._STOP_AND_EXIT

	def preparse(self, raw):
		logging.info(self.prompt + " " + raw)
		return raw

	def do_ssb(self, line):
		'''
		ssb mode
		'''
		self.popoto.send('startVoice')
		self.popoto.setValueI("APP_SystemMode", 2)

	def do_ssbtx(self, line):
		'''
		ssb mode
		'''
		self.popoto.send('startVoice')
		self.popoto.setValueI("APP_SystemMode", 3)

	def kbhit(self):
		dr,dw,de = select([sys.stdin], [], [], 0)
		return dr <> []


	def do_upload(self, line):
		"""
		Uploads a file in streaming mode.  
		 	upload [filename] [power level]
		"""
		args = line.split(" ")
		if(len(args) != 2):
			print("Use upload [filename] [power level]")
		else:	
			filename = args[0]
			power = float(args[1])
			
			self.popoto.StreamUpload(filename, power)
	def do_setRate80(self,line):
		self.popoto.setValueI("PayloadMode", 0)
	def do_setRate10240(self,line):
		self.popoto.setValueI("PayloadMode", 5)

	def do_setRate5120(self,line):
		self.popoto.setValueI("PayloadMode", 1)
	def do_setRate2560(self,line):
		self.popoto.setValueI("PayloadMode", 2)
	def do_setRate1280(self,line):
		self.popoto.setValueI("PayloadMode", 3)
	def do_setRate640(self,line):
		self.popoto.setValueI("PayloadMode", 4)

	def do_transmitJSONFiles(self, line):
		'''
		transmit a series of JSON messages out of a file. 

		transmitJSONFiles  <filename> <power> <delay between transmissions> <num transmissions per packet>
		'''

		self.popoto.drainReplyQ()


		try:
			args = line.split(" ")
			filename = args[0];
			power = float(args[1])
			delays = float(args[2])
			numTx = int(args[3])
		except:
			print ('Use: testJanus  <filename> <power> <delay between transmissions> <num transmissions per packet> ')
			return


		self.popoto.setValueF('TxPowerWatts', power)
	
		with open(filename) as fp:
			rline = fp.readline()
			cnt = 1
			txcount = 1 
			totalcount = 1
			while rline:
				if(rline[0] !='#'):
					print(rline)
					rline= rline.rstrip()
					txcount = 1
					startTime = time.time();
					for txcount in range(1, numTx+1):
						now = datetime.datetime.now();

						print("**********************   Transmission Line {} Iteration {} Total Count {}  Time {}  **********************".format(cnt, txcount, totalcount, now.strftime("%Y:%m:%d %H:%M:%S.%f")))
						self.popoto.transmitJSON(rline)

						done = False
						while(done == False):
							try:
								reply = self.popoto.replyQ.get(True, 1)
								if("Alert" in reply):
									if(reply["Alert"] == "TxComplete"):
										done = True; 
									if(reply['Alert'] == "MAC dumped packet"):
										print("******* ALERT ******** MAC layer dumped the packet")
										done = True
							except:
								if(self.kbhit()):
									done = True

						time.sleep(delays)
						totalcount += 1
				rline = fp.readline()
				cnt += 1


	def do_transmit(self, line):
		self.popoto.transmitJSON(line)


if __name__ == '__main__':

	
	ds = dshell()
	connected = False
	'''
	while connected == False:
		try:
			ds.onecmd('connect localhost 17000')
			connected = True
			ds.prompt = "Popoto-> "
			ds.onecmd('startrx')
		except:
			time.sleep(.1)
	'''
	done =0
	while(done == 0):
		try:

			ds.cmdloop()
			done = 1
		except:
			print("Invalid Input {}".format(sys.exc_info()[0] ))
			ds.intro = ""

